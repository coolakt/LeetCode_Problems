class Solution {
public:
    vector<int> fairCandySwap(vector<int>& aliceSizes, vector<int>& bobSizes) {
        int sumAlice = 0, sumBob = 0;
        for (int i = 0; i < aliceSizes.size(); i++) {
            sumAlice += aliceSizes[i];
        }
        for (int j = 0; j < bobSizes.size(); j++) {
            sumBob += bobSizes[j];
        }
        int target = (sumAlice + sumBob) / 2;

        unordered_set<int> bobSet;
        for (int j = 0; j < bobSizes.size(); j++) {
            bobSet.insert(bobSizes[j]);
        }

        for (int i = 0; i < aliceSizes.size(); i++) {
            int diff = target - (sumAlice - aliceSizes[i]);
            if (bobSet.find(diff) != bobSet.end()) {
                return {aliceSizes[i], diff};
            }
        }

        return {}; // Return an empty vector if no swap is possible
    }
};
